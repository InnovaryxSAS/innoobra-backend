name: Deploy Dev

on:
  push:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (dev)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::528555979765:role/GitHubDeployRole
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

         
      - name: Build common jar
        run: mvn clean package -f lambda-java/common/pom.xml

    
      - name: Zip common layer
        run: |
          mkdir -p infra/dev/layers/common
          zip -j infra/dev/layers/common/common.zip lambda-java/common/target/common-1.0-SNAPSHOT.jar


       # 1. Compilar el JAR de company
      - name: Build Lambda jar
        run: mvn clean package -f lambda-java/company/pom.xml

      # 2. Mover el JAR generado de company a la carpeta de Terraform
      - name: Move lambda.jar to Terraform dir
        run: |
          mkdir -p infra/dev/functions/company
          mv lambda-java/company/target/company-1.0-SNAPSHOT.jar infra/dev/functions/company/company-1.0-SNAPSHOT.jar

      # 3. Compilar el JAR de project
      - name: Build Project Lambda jar
        run: mvn clean package -f lambda-java/project/pom.xml

      # 4. Mover el JAR generado de project a la carpeta de Terraform
      - name: Move project lambda to Terraform dir
        run: |
          mkdir -p infra/dev/functions/project
          mv lambda-java/project/target/project-1.0-SNAPSHOT.jar infra/dev/functions/project/project-1.0-SNAPSHOT.jar

      # 5. Compilar el JAR de role
      - name: Build Project Lambda jar
        run: mvn clean package -f lambda-java/role/pom.xml

      # 6. Mover el JAR generado de role a la carpeta de Terraform
      - name: Move role lambda to Terraform dir
        run: |
          mkdir -p infra/dev/functions/role
          mv lambda-java/role/target/role-1.0-SNAPSHOT.jar infra/dev/functions/role/role-1.0-SNAPSHOT.jar

      # 7. Compilar el JAR de User
      - name: Build user Lambda jar
        run: mvn clean package -f lambda-java/user/pom.xml

      # 8. Mover el JAR generado de User a la carpeta de Terraform
      - name: Move user lambda to Terraform dir
        run: |
          mkdir -p infra/dev/functions/user
          mv lambda-java/user/target/user-1.0-SNAPSHOT.jar infra/dev/functions/user/user-1.0-SNAPSHOT.jar

      # 9. Compilar el JAR de Chapter
      - name: Build chapter Lambda jar
        run: mvn clean package -f lambda-java/chapter/pom.xml

      # 10. Mover el JAR generado de Chapter a la carpeta de Terraform
      - name: Move chapter lambda to Terraform dir
        run: |
          mkdir -p infra/dev/functions/chapter
          mv lambda-java/chapter/target/chapter-1.0-SNAPSHOT.jar infra/dev/functions/chapter/chapter-1.0-SNAPSHOT.jar

      # 9. Compilar el JAR de Activity
      - name: Build activity Lambda jar
        run: mvn clean package -f lambda-java/activity/pom.xml

      # 10. Mover el JAR generado de Activity a la carpeta de Terraform
      - name: Move activity lambda.jar to Terraform dir
        run: |
          mkdir -p infra/dev/functions/activity
          mv lambda-java/activity/target/activity-1.0-SNAPSHOT.jar infra/dev/functions/activity/activity-1.0-SNAPSHOT.jar

      - name: Terraform Init
        run: terraform init
        working-directory: infra/dev

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: infra/dev
