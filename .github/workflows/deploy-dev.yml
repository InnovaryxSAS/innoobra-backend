name: Deploy Dev

on:
  push:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (dev)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::528555979765:role/GitHubDeployRole
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

         
      - name: Install zip utility
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Install parent POM
        run: mvn clean install -DskipTests -f lambda-java/pom.xml

      - name: Build & package common layer
        run: mvn clean package -DskipTests -f lambda-java/common/pom.xml

      - name: Zip common layer
        run: |
          mkdir -p infra/dev/layers/common
          zip -j infra/dev/layers/common/common.zip \
            lambda-java/common/target/common-1.0-SNAPSHOT.jar


       # 1. Compilar el JAR de company
      - name: Build Lambda jar
        run: mvn clean package -f lambda-java/company/pom.xml

      # 2. Mover el JAR generado de company a la carpeta de Terraform
      - name: Move lambda.jar to Terraform dir
        run: |
          mkdir -p infra/dev/functions/company
          mv lambda-java/company/target/company-1.0-SNAPSHOT.jar infra/dev/functions/company/company-1.0-SNAPSHOT.jar

      # 3. Compilar el JAR de project
      - name: Build Project Lambda jar
        run: mvn clean package -f lambda-java/project/pom.xml

      # 4. Mover el JAR generado de project a la carpeta de Terraform
      - name: Move project lambda to Terraform dir
        run: |
          mkdir -p infra/dev/functions/project
          mv lambda-java/project/target/project-1.0-SNAPSHOT.jar infra/dev/functions/project/project-1.0-SNAPSHOT.jar

      # 5. Compilar el JAR de role
      - name: Build Project Lambda jar
        run: mvn clean package -f lambda-java/role/pom.xml

      # 6. Mover el JAR generado de role a la carpeta de Terraform
      - name: Move role lambda to Terraform dir
        run: |
          mkdir -p infra/dev/functions/role
          mv lambda-java/role/target/role-1.0-SNAPSHOT.jar infra/dev/functions/role/role-1.0-SNAPSHOT.jar

      # 7. Compilar el JAR de User
      - name: Build user Lambda jar
        run: mvn clean package -f lambda-java/user/pom.xml

      # 8. Mover el JAR generado de User a la carpeta de Terraform
      - name: Move user lambda to Terraform dir
        run: |
          mkdir -p infra/dev/functions/user
          mv lambda-java/user/target/user-1.0-SNAPSHOT.jar infra/dev/functions/user/user-1.0-SNAPSHOT.jar

      # 9. Compilar el JAR de Chapter
      - name: Build chapter Lambda jar
        run: mvn clean package -f lambda-java/chapter/pom.xml

      # 10. Mover el JAR generado de Chapter a la carpeta de Terraform
      - name: Move chapter lambda to Terraform dir
        run: |
          mkdir -p infra/dev/functions/chapter
          mv lambda-java/chapter/target/chapter-1.0-SNAPSHOT.jar infra/dev/functions/chapter/chapter-1.0-SNAPSHOT.jar

      # 11. Compilar el JAR de Activity
      - name: Build activity Lambda jar
        run: mvn clean package -f lambda-java/activity/pom.xml

      # 12. Mover el JAR generado de Activity a la carpeta de Terraform
      - name: Move activity lambda.jar to Terraform dir
        run: |
          mkdir -p infra/dev/functions/activity
          mv lambda-java/activity/target/activity-1.0-SNAPSHOT.jar infra/dev/functions/activity/activity-1.0-SNAPSHOT.jar

      # 13. Compilar el JAR de Attribute
      - name: Build attributte Lambda jar
        run: mvn clean package -f lambda-java/attribute/pom.xml

      # 14. Mover el JAR generado de attribute a la carpeta de Terraform
      - name: Move attribute lambda.jar to Terraform dir
        run: |
          mkdir -p infra/dev/functions/attribute
          mv lambda-java/attribute/target/attribute-1.0-SNAPSHOT.jar infra/dev/functions/attribute/attribute-1.0-SNAPSHOT.jar

      # 15. Compilar el JAR de ApuDetail
      - name: Build ApuDetail Lambda jar
        run: mvn clean package -f lambda-java/apudetail/pom.xml

      # 16. Mover el JAR generado de apudetail a la carpeta de Terraform
      - name: Move ApuDetail lambda.jar to Terraform dir
        run: |
          mkdir -p infra/dev/functions/apudetail
          mv lambda-java/apudetail/target/apudetail-1.0-SNAPSHOT.jar infra/dev/functions/apudetail/apudetail-1.0-SNAPSHOT.jar


       # ————— Terraform —————
      - name: Terraform Init
        working-directory: infra/dev
        run: terraform init -input=false

      - name: Terraform State Migration
        working-directory: infra/dev
        run: |
          # Reubica en el state cada Lambda que antes estaba inline
          for fn in \
            create_company get_companies get_companiesID update_company delete_company \
            create_project get_projects get_project_by_id update_project delete_project \
            create_role get_roles get_role_by_id update_role delete_role \
            create_user get_users get_user_by_id update_user delete_user \
            create_chapter get_chapters get_chapter_by_id update_chapter delete_chapter \
            create_attribute get_attributes get_attribute_by_id update_attribute delete_attribute; do

            echo "Migrando recurso Lambda $fn..."
            terraform state mv \
              "aws_lambda_function.lambda[\"$fn\"]" \
              "module.lambda.aws_lambda_function.this[\"$fn\"]"

            terraform state mv \
              "aws_lambda_permission.api_gw[\"$fn\"]" \
              "module.lambda.aws_lambda_permission.api_gw[\"$fn\"]"

            terraform state mv \
              "aws_apigatewayv2_integration.lambda_integration[\"$fn\"]" \
              "module.lambda.aws_apigatewayv2_integration.lambda_integration[\"$fn\"]"

            terraform state mv \
              "aws_apigatewayv2_route.lambda_route[\"$fn\"]" \
              "module.lambda.aws_apigatewayv2_route.lambda_route[\"$fn\"]"
          done

          # Y fuera del bucle, la capa y el HTTP API
          terraform state mv \
            aws_lambda_layer_version.common \
            module.lambda.aws_lambda_layer_version.common

          terraform state mv \
            aws_apigatewayv2_api.http_api \
            module.lambda.aws_apigatewayv2_api.http_api

          terraform state mv \
            aws_apigatewayv2_stage.default \
            module.lambda.aws_apigatewayv2_stage.default

      - name: Terraform Plan
        working-directory: infra/dev
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/dev'
        working-directory: infra/dev
        run: terraform apply -input=false -auto-approve tfplan
