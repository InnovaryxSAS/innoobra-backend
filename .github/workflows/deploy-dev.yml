name: Deploy Dev

on:
  push:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      LAMBDA_BUCKET: mi-bucket-de-lambdas

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (dev)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::528555979765:role/GitHubDeployRole
          aws-region: us-east-1

      - name: Set bucket env var
        run: echo "LAMBDA_BUCKET=mi-bucket-de-lambdas" >> $GITHUB_ENV    

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

         
      - name: Install zip utility
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Install parent POM
        run: mvn clean install -DskipTests -f lambda-java/pom.xml

      # Compilar todos los JARs y subirlos directamente a S3 (dinámico)
      - name: Build and upload all Lambda JARs
        run: |
          for module in $(ls lambda-java | grep -v common); do
            if [ -f "lambda-java/$module/pom.xml" ]; then
              mvn clean package -DskipTests -f lambda-java/$module/pom.xml
              aws s3 cp lambda-java/$module/target/$module-1.0-SNAPSHOT.jar s3://$LAMBDA_BUCKET/lambdas/$module/$module-1.0-SNAPSHOT.jar
            fi
          done
          # Subir la capa común
          mvn clean package -DskipTests -f lambda-java/common/pom.xml
          mkdir -p infra/dev/layers/common
          zip -j infra/dev/layers/common/common.zip lambda-java/common/target/common-1.0-SNAPSHOT.jar
          aws s3 cp infra/dev/layers/common/common.zip s3://$LAMBDA_BUCKET/common-layers/common.zip

      # ————— Terraform —————
      - name: Terraform Init
        working-directory: infra/dev
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: infra/dev
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/dev'
        working-directory: infra/dev
        env:
          TF_VAR_lambda_bucket: ${{ secrets.LAMBDA_BUCKET }}
        run: terraform apply -input=false -parallelism=5 -auto-approve tfplan


